#!/bin/bash
# Skill-Backup - AKA GenQL

# Ce petit script a ete mis au point afin d'un peu centraliser certains outils
# dont nous avons fréquemment besoin.
# Ce script est écrit pour être entièrement dirigé par une interface simple et
# minimaliste, ainsi que pour faire effectuer des backups par cron grace a un 
# lancement avec paramètres.

#MIT Licence terms:
#Copyright (c) 2010 Open Skill

# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use,
# copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following
# conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
# Written by JuPiTeR, thanks to the precious help of Nuxien (Johan Roussel).

# Please be sure you don't email us telling this script is sh*t without mentioning
# why and how you would improve it better (precise code example wanted) :) thank you ^^

# This script has the following dependencies:
#  * usual binutils, rsync, wget, mailx.
#  * A set of RSA keys (public/private) for ssh login.

#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!!!!!!!! Warning :                                            !!!!!!!!!!!!!
#!!!!!!!!                                                      !!!!!!!!!!!!!
#!!!!!!!! This script is EXPERIMENTAL so far, don't expect it  !!!!!!!!!!!!!
#!!!!!!!! to run flawlessly, and don't use it as only way of   !!!!!!!!!!!!!
#!!!!!!!! backup, unless you know what you are doing           !!!!!!!!!!!!!
#!!!!!!!! in NO case can an author of this script be held      !!!!!!!!!!!!!
#!!!!!!!! responsible for any inconvenience it could cause:    !!!!!!!!!!!!!
#!!!!! You use this program at your own risk and are aware of it  !!!!!!!!!!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

# Changelog
#  * V0.1 (30-12-2009)
#  * Interactive menu is working
#  * Backups done per 1 or per batch
#  * Generation of the genQL folder (to be put on the serv)
#  * Listings of sme and ftpovh sites
#  * Add sites to sme and ftpovh listings
#  * Remove sites to sme and ftpovh listings
#  * Restoration of sme sites
#  * Few parameters created to call the script from cron
#  *V0.2 (31-12-2009)
#  * I changed the program's logical path, and changed the code accordingly to the changes.
#  * I declared heaps of the needed menus and functions (just have to fill them now)
#  *V0.3 (01-01-2010)
#  * Tous les menus ont été générés selon la structure définie.
#  * Le code a été identé convenablement.
#  * Amélioration de la gestion des erreurs.
#  *V0.4 (05-01-2010)
#  * Les restore sme fonctionne, juste penser a mettre un user www sur la machine pour run le script! (parfois il faut encore chmod sur le serveur!!!)
#  * Il n'y a plus de commandes awk \o/
#  * Variabilisé les données sensibles (plus facile a partager)
#  * Remplacé dog par sed (Thanks to 'Kon' from hackits.de !!!) [Parce que sed, sedien!]
#  * Réservé le nom de domaine! 
#  * Le système de cron interne est au point \o/
#  * passé le ping en fonction avec valeur de return
#  *V0.5 (06.01.2010)  -_- First public alpha release \o/
#  * Separated conf file
#  * Changed the backup dir to be a variable
#  * Changed then genQL dir's name to be a var (this enhances security on blind attacks)
#  * Grouped some functions, got 100 lignes shorter \o/
#  *V0.5-1
#  * Changed ftp backup from wget to lftp
#  * Implemented ftp restore
#  * Implemented auto-upload of $genQL__dir on the server it was generated for.
#  * Implemented the use of path.php; This allows the script to know the path of the site, and will serve to generate .htacces, and for ssh backups.
#  * Implemented some kinda cleaning management to save space.
#  * Implemented daily limit of one total backup/site (sql backups not concerned) [can be bypassed by removing files of var].
#  * Implemented base for monthly backup differenciation
#  * I changed the backup functions so much, that I broke the restore function \o/ (This is temporary and will be way easier for me now :p)
#  * Fixed the chown problem on ssh restore
#  * Implemented random times and dates (to spread backups on time on the week)
#  * Implemented priority handling (backs-up some site sooner and some later)
#  * Changed house to sme.
#  *V0.59-2 (30.06.2010) Sorry about the slow dev, but I'm alone and I do it on my free time!
#  * Added Mail logging support (with mailx)
#  * Added debug mode (\o/ woooooooooot)
#  *V0.59-3 (01.07.2010)
#  * Fixed a couple of bugs happening in the date=1 condition loops.
#  * Added a lot of data to the mails (du of sites and df of disks)
#  * Fixed mail function (I hope ^^)
#  V0.59-4 (06/08/2010)
#  * Added warning mail for when var/run allready exists and script is stopped
#  V0.59-5 (06/08/2010)
#  * Reformatted logs yet another time
#  * Changed onyx to blueonyx and added required menu's
#  * Translated some stuff to english... still a lot to go :s
#  * Now script checks it only runs once \o/
#  * Contains an awk command again :s
#  * I allready had 0 feedbacks for this script, so I'm not really in a hurry ^^
#  * Added some checks to see if DB backup where done correctly in ftpovh's DB (will be ported to the rest) - ported to sme... still loads to do
#  * Added a very basic html log generation ( f_makehtmlist )
#  V0.59-7 (24/08/2010)
#  * !!! Blueonyx need chown -R apache AND some mysql commands to add perms for lock table !!! mysql -p
#		REVOKE ALL PRIVILEGES ON `$dbname` . * FROM '$username'@'localhost';
#		GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER, CREATE TEMPORARY TABLES, LOCK TABLES ON `$dbname` . * TO '$username'@'localhost';
#  * did a bit more of english conversion... (way to go :'s)

# TODOLIST
# V0.7 Big Leap Forward
# 
# This is a big major release, many core modifictations in the script : Optimisation and security.
# 
# Security : Include Sets of RSA keys for hosts to backup (by managing id_rsa generation and changes according to the hosts) - In progress
# Security : Add tight default iptables setup - Not yet!
# Security : Use a defined username ! In Progress
# Security : Use different .htaccess login/password for each site : Allmost done
# - use of uuencode in randomness pass generation - done
# Added support for various config/dat files through simple variable - done
# Merge all .dat files in a single one - This will render the script more flexible - Done, but now I need to adapt the rest of the script
# 	Issue 1 : Many distros use different locations for the sites, sometimes different usernames ; this is a pain in the *** to autodetect, and that's why it's not automatised (more fields required in config).
#	Issue 2 : The use of different protocols (ssh and ftp) - add a field in data specifiing protocol to be used
############
# dat file specifications: Each line represents a site to backup 
# dns;active;protocol;login;pass;loginhtacces;passhtaccess;backdns;directory;timesite;daysite;timedb;daydb;coef;GB;Priority
#  dns: Contains the dns of the site to save
#  active: 1 if site's backup is active ; 0 if it's inactive
#  protocol: ftp or ssh
#  login: Which login to use to login to the site
#  pass: Password for login (ONLY for FTP ; for ssh, RSA key-authentication is used)
#  logichtaccess: login to be used for the site's htaccess
#  passhtaccess: pass to be used for the site's htaccess
#  backdns: Sometimes, the ftp to backup a site doesn't have the same address as the site itself, this is where you declare it
#  directory: Where on the server is the directory? (important for the .htaccess)
#  timesite: Time where the site should be backed-up
#  daysite: Day the site should be backed up
#  daydb: Day the DB should be backed up
#  GB: Allowed backup size
#  Priority: Allows to define which sites are the most important ones to backup
#####
# Mail loglevel : 0 NONE - 1 ERRORS ONLY - 2 Everything - 3 - 4 - 5
# !!! When mixing ovh hosted accounts with custom - done
#  * port backupchecks in all backups!
#  * Implémentation du restore de db seulement
#  * Implementer le controle de checksums
#  * Uniformiser les langues (anglais ou fr ou internationaliser le script?)
#----------- V1.0 ???????  - One day perhaps !
################################################################################
################################################################################
# 1. We Declare the variables
pwd_init=`pwd` # don't edit this one !
admin__mail="lol@here" && backup__dir="backup" && genQL__dir="genQL"
#admin__mail=`cat $conffile|grep admin__mail|cut -f 2 -d";"` #read from conffile
#backup__dir=`cat $conffile|grep backup__dir|cut -f 2 -d";"` #read from conffile
#genQL__dir=`cat $conffile|grep genQL__dir|cut -f 2 -d";"` #read from conffile
rsabits=4096 #set the size of RSA key you want
datfile=datfile.dat #which datfile should be used
htstrength=18 #desired size of htaccess credentials.
conffile=genQL.conf #which conf file should be used
# Debug mode (1 Enable - 0 Disable )
debug=0
pingtest=1
################################################################################
# 2. We create the required foldertree
################################################################################
mkdir -p var log $backup__dir
touch $datfile
# Start is logged
echo "$0 $1 started on `date +%Y%m%d` at `date +%R` " >> log/backup.log
################################################################################
# Debug Mode tells when/if it crashes (var must be set on 1)
function f_debug {
if [ "x$debug" = "x1" ]; then
	echo "debug = $1"  && echo "pwd = `pwd`"
	echo "debug = $1" >> log/debug.log && echo "pwd = `pwd`" >> log/debug.log
fi
}
################################################################################
# Maillog mails the logs to $admin__mail (set in conf file)
function f_maillog {
fonction="f_maillog"
f_debug $fonction
##########################################################################################################""
# Send 1 mail per day = default -- and a mail directly if an error is reported.
if [ `date +%H` = 23 ]; then
	rm log/index.html
	echo "Maillog started on `date +%d%m%Y` at `date +%R`" >> log/genQL.log 
	echo " " >> log/genQL.log && echo "Maillog started on `date +%d%m%Y` at `date +%R`"
	echo "Disk space Analysis:" >> log/genQL.log && df -h >> log/genQL.log && echo " " >> log/genQL.log
	for y in `ls $backup__dir/`
		do
		du -h --max-depth=1 $backup__dir/$y >> log/genQL.log
		done
	echo " " >> log/genQL.log
	for z in `ls log/`
		do
		if [ "x$z" != "genQL.log" ]; then
			echo " " >> log/genQL.log
			echo $z >> log/genQL.log
			cat log/$z >> log/genQL.log
			rm log/$z
		fi
		done
	f_makehtmlist
	cat log/genQL.log | mailx -s "genQL-`date +%d%m%Y`" $admin__mail && rm log/genQL.log && echo "Info mail should have been sent"
fi
}
################################################################################
# Exit
function f_exit {
fonction="f_exit"
f_debug $fonction
cd $pwd_init
rm ${pidfile} && f_maillog && echo "we got out \"properly\""
exit 0
}
################################################################################
trap bashtrap INT 
bashtrap() 
{
echo "You termintated the program, calling f_exit" && echo "Bashtrap killed program on `date +%d%m%Y` at `date +%R`" >> log/backup.log
f_exit
}
################################################################################
function f_isempty {
if [ "x$1" = "x" ]; then
	echo "This can't be left blank, please retry filling it"
	sleep 2
	return 1
fi
}

################################################################################
#  The script is only supposed to run once: 
scriptname=`basename $0`
pidfile=$pwd_init/var/${scriptname}.pid
if [ -f ${pidfile} ]; then
	oldpid=`cat ${pidfile}`
	result=`ps -ef | grep ${oldpid} | grep ${scriptname}`
	if [ -n "${result}" ]; then
		echo "Script already running! Exiting" && echo "Script already running on `date +%Y%m%d` at `date +%R` with pid=$oldpid" >> log/error.log
		f_exit
	fi
fi
pid=`ps -ef | grep ${scriptname} | head -n1 |  awk ' {print $2;} '`
echo ${pid} > ${pidfile}
################################################################################
# Beginning of MENU Management (functions starting with m_ )
function m_main {
while [ 1 ]
do
	PS3='Choose a number: '
	select choix in "genQL" "listing" "add" "del" "backup" "restore" "report" "quit"
	do
		echo " ";echo "####################################";echo " "
		break
	done
	case $choix in
		genQL) 		f_genQL ;;
		listing)	f_list ;;
		add)		m_ajout ;;
		del)		m_suppression ;;
		backup)		m_backup ;;
		restore)	m_restore ;;
		report)		f_rapport ;;
		quit)		echo "errors of this session:";cat $pwd_init/log/error.log;echo " ";echo "bye ;)";f_exit ;;
		*)		f_nope ;;
	esac
done
}
function m_listing {
PS3='Choose a number: '
select choix in "ftpovh" "sme" "blueonyx" "back"
do
	echo " ";echo "####################################";echo " "
	break
done
case $choix in
	ftpovh)		f_listeftpovh ;;
	sme)		f_listesme ;;
	blueonyx)	f_listeblueonyx ;;
	back) ;;
	*)		f_nope ;;
esac
echo " ";echo "####################################";echo " "
}
function m_ajout {
PS3='Choose a number: '
select choix in "ftpovh" "sme" "blueonyx" "back"
do
	echo " ";echo "####################################";echo " "
	break
done
case $choix in
	ftpovh)		f_ajoutftpovh ;;
	sme)		f_ajoutsme ;;
	blueonyx)	f_ajoutblueonyx ;;
	back) ;;
	*)		f_nope ;;
esac
}
function m_suppression {
PS3='Choose a number: '
select choix in "ftpovh" "sme" "blueonyx" "back"
do
	echo " ";echo "####################################";echo " "
	break
done
case $choix in
	ftpovh)		f_delftpovh ;;
	sme)		f_delsme ;;
	blueonyx)	f_delblueonyx ;;
	back) ;;
	*)		f_nope ;;
esac
}
function m_backup {
PS3='Choose a number: '
select choix in "backupsite" "backupdb" "back"
do
	echo " ";echo "####################################";echo " "
	break
done
case $choix in
	backupsite)	m_backupsite ;;
	backupdb)	m_backupdb ;;
	back) ;;
	*)		f_nope ;;
esac
}
function m_backupsite {
PS3='Choose a number: '
select choix in "ftpovh" "sme" "blueonyx" "backup1site" "back"
do
	echo " ";echo "####################################";echo " "
	break
done
case $choix in
	ftpovh)		f_backuptoutftpovh ;;
	sme)		f_backuptoutsme ;;
	blueonyx)	f_backuptoutblueonyx ;;
	backup1site)	m_backup1site ;;
	back) ;;
	*)		f_nope ;;
esac
}
function m_backup1site {
PS3='Choose a number: '
select choix in "ftpovh" "sme" "blueonyx" "$exception" "back"
do
	echo " ";echo "####################################";echo " "
	break
done
case $choix in
	ftpovh)		f_backup1ftpovh ;;
	sme)		f_backup1sme ;;
	blueonyx)	f_backup1blueonyx ;;
	$exception)	f_backup$exception ;;
	back) ;;
	*)			f_nope ;;
esac
}
function m_backupdb {
PS3='Choose a number: '
select choix in "ftpovh" "sme" "blueonyx" "backup1db" "back"
do
	echo " ";echo "####################################";echo " "
	break
done
case $choix in
	ftpovh)		f_backupdbtoutftpovh ;;
	sme)		f_backupdbtoutsme ;;
	blueonyx)	f_backupdbtoutblueonyx ;;
	backup1db)	m_backup1db ;;
	back) ;;
	*)		f_nope ;;
esac
}
function m_backup1db {
PS3='Choose a number: '
select choix in "ftpovh" "sme" "blueonyx" "$exception" "back"
do
	echo " ";echo "####################################";echo " "
	break
done
case $choix in
	ftpovh)		f_backup1dbftpovh ;;
	sme)		f_backup1dbsme ;;
	blueonyx)	f_backup1dbblueonyx ;;
	$exception)	f_backupdb$exception ;;
	back) ;;
	*)		f_nope ;;
esac
}
function m_restore {
PS3='Choose a number: '
select choix in "restoresite" "restoredb" "back"
do
	echo " ";echo "####################################";echo " "
	break
done
case $choix in
	restoresite)	m_restoresite ;;
	restoredb)	m_restoredb ;;
	back) ;;
	*)		f_nope ;;
esac
}
function m_restoresite {
PS3='Choose a number: '
select choix in "ftpovh" "sme" "$exception" "back"
do
	echo " ";echo "####################################";echo " "
	break
done
case $choix in
	ftpovh)		f_restore1ftpovh ;;
	sme)		f_restore1sme ;;
	$exception)	f_restore$exception ;;
	back) ;;
	*)		f_nope ;;
esac
}
function m_restoredb {
PS3='Choose a number: '
select choix in "ftpovh" "sme" "$exception" "back"
do
	echo " ";echo "####################################";echo " "
	break
done
case $choix in
	ftpovh)		f_restore1dbftpovh ;;
	sme)		f_restore1dbsme ;;
	$exception)	f_restoredb$exception ;;
	back) ;;
	*)		f_nope ;;
esac
}
# End of MENUS Management
################################################################################
################################################################################
# Start of Function's Management
function f_genQL {
# This function generates the filetree to be uploaded on the server, the key auth 
# mechanism and the ".htaccess" and ".htpasswd" files.
# !!! You should check those files before uploading them on the server
fonction="f_genQL"
f_debug $fonction
########################################
# <DATA RECOLLECTION>
echo "What is the site's dns (compulsary)"
read dns
f_isempty $dns
if [ "x$?" = "x1" ]; then
	return 0
fi
if [ "`cat $datfile | grep $dns`" != '' ]; then
	echo "$dns is allready in $datfile, please check and try again!"
	return 0
fi
f_ping $dns
if [ "x$?" = "x2" ]; then
	echo "$dns does not reply to ping, are you sure you want to add it? (y or n)"
	read yn
	if [ "x$yn" != "xy" ]; then
		return 0
	fi
fi
mkdir -p var/$dns/$genQL__dir var/keys 
echo "Which protocol does the site use (ftp or defaults as ssh)"
read protocol
if [ "x$protocol" != "xftp" ]; then
	protocol="ssh"
fi
echo "What is your login for that protocol (compulsary)"
read l0gin
f_isempty $l0gin
if [ "x$protocol" = "xftp" ]; then
	echo "What is your ftp password"
	read ftpassword
	echo "On which port does the ftp server listen (defaults to 21)?"
	read $port
	if [ "x$port" = "x" ]; then
		port="21"
	fi
elif [ "x$protocol" = "xssh" ]; then
	echo "On which port does the ssh server listen (defaults to 22)?"
	read port
	if [ "x$port" = "" ]; then
	port="x22"
	fi
	echo "Do you already have a shared key on that server? (y or n)"
	read sharedkey
		if [ "x$sharedkey" = "xy" ]; then
			ls var/keys/|cat -n
			echo "Which is the key that should be used?"
			read key
			sshkeyname=`ls var/key | sed -n "$key"p`
		elif [ "x$sharedkey" = "xn" ]; then
			echo "What should be the key's name (!avoid a name that's allready in use!)"
			read sshkeyname
			for i in `ls var/keys/`
				do
				if [ "x$i" = "x$sshkeyname" ]; then
					echo "$i is allready in use as ssh keyname"
					return 1
				fi
				done
			echo "Patience ...  $rsabits bits RSA keyset is being generated"
			ssh-keygen -b $rsabits -t rsa -f key.$sshkeyname
			mv key.$sshkeyname var/keys/
			mv key.$sshkeyname.pub var/$dns/
		else
			echo "y or n ... Please try again"
			return 1
		fi
else
	echo "ftp or ssh ... Please try again"
	return 1
fi
echo "What is your alternative dns (defaults as site's dns)"
read altdns
if [ "x$altdns" = "x" ]; then
	altdns=$dns && echo "Alternative dns set to $altdns"
fi
echo "What's the site's path on the server?"
echo "!!Start at / for ssh and at ~ for ftp!!"
read rpath
f_isempty $rpath
echo "At what time should the site be backed up? (defaults random)"
read timesite
if [ "x$timesite" = "x" ]; then
	f_randomhour
	timesite="$R" && echo "Time Site set to $timesite"
fi
echo "On what day(s) should the site be backed up? (defaults random)"
read daysite
if [ "$xdaysite" = "x" ]; then
	f_randomday
	daysite="$d" && echo "Day Site set to $daysite"
fi
echo "At what time should the db be backed up? (defaults random)"
read timedb
if [ "x$timedb" = "x" ]; then
	f_randomhour
	timedb="$R" && echo "Time db set to $timedb"
fi
echo "On what day(s) should the db be backed up? (defaults every day)"
read daydb
if [ "x$daydb" = "x" ]; then
	daydb="Mon-Tue-Wed-Thu-Fri-Sat-Sun" && echo "Day db set to $daydb"
fi
echo "Site's coefficient (default 1 - will be used to define disk usage)"
read coef
if [ "x$coef" = "x" ]; then
	coef="1"
fi
echo "Site Allowance in Gigabite (default 1)"
read GB
if [ "x$GB" = "x" ]; then
	GB="1"
fi
echo "Site's priority (from 0 to 10 ; smallest are done sooner - Default 5)"
read priority
if [ "x$priority" = "x" ]; then
	priority="5"
fi
echo "Is the site active (put 0 for no ; defaults as 1)"
read active
if [ "x$active" = "x" ]; then
	active="1"
fi
echo "Please enter the database server's name (defaults to localhost)"
read dbserv
if [ "x$dbserv" = "x" ]; then
	dbserv='localhost'
fi
echo "Please enter the name of the database:"
read db
f_isempty $db
echo "Please enter the name of that database's user:"
read user
f_isempty $user
echo "Please enter the corresponding password:"
read pass
f_isempty $pass
# </DATA RECOLLECTION>
########################################
# <FILE GENERATION>
echo "Data Recollection complete, adding config to $datfile and preparing files to upload..."
touch $datfile
mkdir -p var/$dns/$genQL__dir/mysql
#index.php
echo '<?' > var/$dns/$genQL__dir/index.php
echo \$rep_backup\ \=\ \'.\/mysql\/\'\; >> var/$dns/$genQL__dir/index.php
echo '$heure_j = date("H-i");' >> var/$dns/$genQL__dir/index.php
echo '$date_j = date("Ymd");' >> var/$dns/$genQL__dir/index.php
echo \$heure_j\ \=\ str_replace\(\'-\'\,\ \'H\'\,\ \$heure_j\)\; >> var/$dns/$genQL__dir/index.php
echo '$filename = '$db'."-".$date_j."-".$heure_j.".sql";' >> var/$dns/$genQL__dir/index.php
echo 'echo "Your DB is being backed up<p>";' >> var/$dns/$genQL__dir/index.php
echo 'system("'"mysqldump --host=$dbserv --user=$user --password=$pass -C -Q -e --default-character-set=utf8 $db | gzip -c > mysql/\$filename.gz"'");' >> var/$dns/$genQL__dir/index.php
echo 'echo "Done, you can now recover the backup";' >> var/$dns/$genQL__dir/index.php
echo "?>" >> var/$dns/$genQL__dir/index.php
#majeur.php
echo \<\?php > var/$dns/$genQL__dir/majeur.php
echo echo \"Your database is being restored ...... >> var/$dns/$genQL__dir/majeur.php
echo \<br\>\"\; >> var/$dns/$genQL__dir/majeur.php
echo system\(\"cat mysql\/notsuperdb.sql \| mysql --host\=$dbserv --user\=$user --password\=$pass --default-character-set\=utf8 $db\"\)\; >> var/$dns/$genQL__dir/majeur.php
echo echo \"Done, your database has been restored on this hosting.\"\; >> var/$dns/$genQL__dir/majeur.php
echo \?\> >> var/$dns/$genQL__dir/majeur.php
#Les .htaccess et .htpasswd
echo "AuthUserFile "$rpath"/$genQL__dir/.htpasswd" >> var/$dns/$genQL__dir/.htaccess
echo "AuthGroupFile /dev/null" >> var/$dns/$genQL__dir/.htaccess
echo 'AuthName "Restraint Access"' >> var/$dns/$genQL__dir/.htaccess
echo "AuthType Basic" >> var/$dns/$genQL__dir/.htaccess
echo "<Limit GET POST>" >> var/$dns/$genQL__dir/.htaccess
echo "require valid-user" >> var/$dns/$genQL__dir/.htaccess
echo "</Limit>" >> var/$dns/$genQL__dir/.htaccess
loginhtacces=`head -c $htstrength < /dev/urandom | uuencode -m - | tail -n 2 | head -n 1`
passhtaccess=`head -c $htstrength < /dev/urandom | uuencode -m - | tail -n 2 | head -n 1`
htpasswd -bc htpassword $loginhtacces $passhtaccess
#echo "$htaccess__user:$htaccess__pwd_crptd">>$genQL__dir/.htpasswd
touch var/$dns/$genQL__dir/index.html
echo "AuthUserFile "$rpath"/$genQL__dir/mysql/.htpasswd" >> var/$dns/$genQL__dir/mysql/.htaccess
echo "AuthGroupFile /dev/null" >> var/$dns/$genQL__dir/mysql/.htaccess
echo 'AuthName "Restraint Access"' >> var/$dns/$genQL__dir/mysql/.htaccess
echo "AuthType Basic" >> var/$dns/$genQL__dir/mysql/.htaccess
echo "<Limit GET POST>" >> var/$dns/$genQL__dir/mysql/.htaccess
echo "require valid-user" >> var/$dns/$genQL__dir/mysql/.htaccess
echo "</Limit>" >> var/$dns/$genQL__dir/mysql/.htaccess
touch var/$dns/$genQL__dir/mysql/.htpasswd
touch var/$dns/$genQL__dir/mysql/index.html
echo "$dns;$active;$protocol;$l0gin;$ftpassword;$sshkeyname;$loginhtacces;$passhtaccess;$altdns;$port;$rpath;$timesite;$daysite;$timedb;$daydb;$coef;$GB;$priority" >> $datfile
# </FILE GENERATION>
########################################
# Upload Files
#scp -p $port var/$dns/$dns.pub $l0gin@:~/.ssh/authorized_keys
#####################################
#Should the script upload the files?
#if [ x$protocol = "xftp" ]; then
#		echo "patience, uploading!"
#		lftp -c "open ftp.$b && user $c $d && cd www && mirror --reverse --delete var/$dns/$genQL__dir var/$dns/$genQL__dir" 2>>$pwd_init/log/error.log && echo "genQL is in place on $b"
#	elif [ "$xservice" = "xssh" ]; then
#		echo "patience, uploading!"
#		rsync -qaEzc -e ssh var/$dns/$genQL__dir root@$sme__domain:$sme__basedir/$site/html/ 2>>$pwd_init/log/error.log && echo "$genQL__dir is in place on $site"
#		ssh $sme__domain -l root "chown -R www:clients /home/e-smith/files/ibays/$site/html/" && echo "chown done"
#	OR	rsync -qaEzc -e ssh var/$dns/$genQL__dir root@$site:/home/sites/$site/web/ 2>>$pwd_init/log/error.log && echo "$genQL__dir is in place on $site"
#		andthenchownthefiles
#		rep=`ssh $site -l root ls -l /home/sites/|grep $site | cut -f 4 -d"/"`
#		ssh $site -l root "chown -R apache:$rep /home/sites/$site/web/" && echo "chown done"
# Eapeasy ! but so far, just:
tar -czf var/$dns.tar.gz var/$dns && rm -Rf var/$dns && echo "########################################" && echo "Everything has been generated as should be, you can now proceed to upload"
echo "/var/$dns.tar.gz in order to place the $genQL__dir" 
if [ "$protocol" = "ssh" ]; then
	if [ "$sharedkey" = "n" ]; then
		echo "key.$sshkeyname in the ~/.ssh/authorized_keys"
	fi
fi
echo "########################################"
#Don't forget to put the right right on database with "mysql -u root -p"
# REVOKE ALL PRIVILEGES ON `dbname` . * FROM 'dbuser'@'localhost';
# GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER, CREATE TEMPORARY TABLES, LOCK TABLES ON `dbname` . * TO 'dbuser'@'localhost';
}
##################################################################################################################
##################################################################################################################
function f_enablesiteauth {
#called with $dns as arg !
fonction="f_enablesiteauth"
f_debug $fonction
cp var/keys/$0 /home/`whoami`/.ssh/id_rsa && echo "key of $0 enabled"
}
function f_makehtmlist {
#This function makes a simple html list log. 
echo "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">" > log/index.html
echo "<html>" >> log/index.html
echo "<head>" >> log/index.html
echo "<title>genQL `date +%Y%m%d` at `date +%R` report</title>" >> log/index.html
echo "<meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">" >> log/index.html
echo "</head><body>" >> log/index.html
for i in `ls $pwd_init/log`
	do
	if [ $i != "index.html" ]; then
		echo "<h1 align=\"center\" $i</h1>" >> log/index.html
		echo "<p>" >> log/index.html
		cat log/$i >> log/index.html
		echo "</p>" >> log/index.html
	fi
	done
echo "</body>" >> log/index.html
echo "</html>" >> log/index.html
echo "html log generated"
return 0
}
function f_list {
fonction="f_liste"
f_debug $fonction
echo "press q to quit the list, use arrows to move"
sleep 2
less -N $datfile && return 0
}
function f_remove {
fonction="f_remove"
f_debug $fonction
echo "Choose which site you want to delete, note it's number, and then press q to quit the list"
sleep 2
less -N $datfile && return 0
echo "Please give the site's number:"
read delsite
echo "Please confirm that this is the site you want to remove from the backup by pressing y"
sed $delsite'q;d' $datfile 
read confirm
if [ "$confirm" = "y" ]; then
	sed -i "$delsite"d $datfile && echo "site has been removed" && echo " "
else
	echo "that wasn't y!, please try again" && echo " "
	return 1
fi
}
function f_backupsite {
fonction="f_backupsite"
f_debug $fonction
i=$1
line=sed $i'q;d' $datfile
#
dns=`echo $line|cut -f 1 -d";"`
active=`echo $line|cut -f 2 -d";"`
protocol=`echo $line|cut -f 3 -d";"`
l0gin=`echo $line|cut -f 4 -d";"`
ftpassword=`echo $line|cut -f 5 -d";"`
sshkeyname=`echo $line|cut -f 6 -d";"`
loginhtacces=`echo $line|cut -f 7 -d";"`
passhtaccess=`echo $line|cut -f 8 -d";"`
altdns=`echo $line|cut -f 9 -d";"`
port=`echo $line|cut -f 10 -d";"`
rpath=`echo $line|cut -f 11 -d";"`
timesite=`echo $line|cut -f 12 -d";"`
daysite=`echo $line|cut -f 13 -d";"`
timedb=`echo $line|cut -f 14 -d";"`
daydb=`echo $line|cut -f 15 -d";"`
coef=`echo $line|cut -f 16 -d";"`
GB=`echo $line|cut -f 17 -d";"`
priority=`echo $line|cut -f 18 -d";"`
#
date=`date +%Y%m%d`
f_ping $dns
if [ "$?" = "1" ]; then
	mkdir -p $backup__dir/$dns/files $backup__dir/$dns/mysql
	wget -q http://$dns/$genQL__dir/index.php --http-user=$loginhtacces --http-password=$passhtaccess 2>>$pwd_init/log/error.log
	rm index.php
	echo "Patience, $dns Is being downloaded. . ."
	if [ "$protocol" = "ssh" ]; then
		rsync -qaEz -e ssh $l0gin@$altdns:$rpath/ $backup__dir/$dns/files/$dns/ > /dev/null 2>>$pwd_init/log/error.log && echo "$dns has been downloaded"
		cp $backup__dir/$dns/files/$dns/$genQL__dir/mysql/*.sql.gz $backup__dir/$dns/mysql/ 2>>$pwd_init/log/error.log && echo "$dns's databases have been isolated."
	elif [ "$protocol" = "ftp" ]; then
		lftp -c "open $dns && user $l0gin $ftpassword && mirror -x .htpasswd -x www/$genQL__dir/index.php -x www/$genQL__dir/majeur.php /$genQL__dir/mysql $backup__dir/$dns/mysql" 2>>$pwd_init/log/error.log && echo "Database Downloaded"
		rm index.php
		echo Download de $dns en cours
		lftp -c "open $dns && user $l0gin $ftpassword && mirror -x .htpasswd -x www/$genQL__dir/index.php -x www/$genQL__dir/majeur.php / $backup__dir/$dns/files/$dns/" 2>>$pwd_init/log/error.log && echo "Site Downloaded"
	fi
	echo "Patience, compression of $dns in progress. . ."
	cd $backup__dir/$dns/files
	if [ `date +%d` = "01" ]; then
		mois=`date --date="yesterday" +%b`
		for j in `ls $dns/$genQL__dir/mysql/|grep -v \`date --date="yesterday" +%Y%m\``
		do
			rm $dns/$genQL__dir/mysql/$j
		done
		tar -cpzf $dns-$mois.`date +%Y`.tar.gz $dns 2>>$pwd_init/log/error.log 
		if [ -f $dns-$mois.`date +%Y`.tar.gz ]; then
			echo "$dns was saved in $backup__dir/$dns/files/$dns-$mois.`date +%Y`.tar.gz" && echo "$dns was saved in $backup__dir/$dns/files/$dns-$mois.`date +%Y`.tar.gz" >> $pwd_init/log/backup.log
			cd $pwd_init
			# FUNCTION f_clean $dns
			echo "$date" > var/$dns
		fi
	else
		for j in `ls $dns/$genQL__dir/mysql/|grep -v \`date +%Y%m\``
		do
			rm $dns/$genQL__dir/mysql/$j
		done
		tar -cpzf $dns-$date.tar.gz $dns 2>>$pwd_init/log/error.log
		if [ -f $i-$date.tar.gz ]; then
			echo "$dns was saved in $backup__dir/$dns/files/$dns-$date.tar.gz" && echo "$dns was saved in $backup__dir/$dns/files/$dns-$date.tar.gz" >> $pwd_init/log/backup.log
			cd $pwd_init
			# FUNCTION f_clean $dns
			echo "$date" > var/$dns
		fi
	fi
fi
}
function f_backupdb {
fonction="f_backupdb"
f_debug $fonction
}


############################
# Check if backup was done
	checkifdone=`ls $backup__dir/sme/$i/files/ | grep "\`date +%Y%m%d\`"|tail -n 1`
	checkifdonesize=`ls -l $backup__dir/sme/$i/files/| grep "\`date +%Y%m%d\`"|tail -n 1|cut -f 6 -d" "`
	echo $checkifdone
	if [ `echo $checkifdone|wc -m` -lt "5" ]; then
		echo "ERROR !!! Can't find today's backup of $i which is supposed to just have been done !!! " && echo "ERROR !!! Can't find today's backup of $i which is supposed to just have been done !!!" >> log/error.sme.log
	else
		echo "$checkifdone has been correctly backed up and is $checkifdonesize in size"
		echo "size is $checkifdonesize on `date +%Y%m%d` at `date +%R`" >> $backup__dir/sme/$i/checkifdone
		checkifdonestate=`cat $backup__dir/sme/$i/checkifdone|grep $checkifdonesize|wc -l`
		let nochangetime=$checkifdonestate/`cat sme.dat|grep $i|cut -f 2 -d";"|sed 's/-/ /'|wc -w`
		if [ "$nochangetime" -gt "1" ]; then
			echo "!!! Warning, size of sme $i hasn't changed in $nochangetime days" >> log/warning.sme.log
		fi
	fi
rm index.php 2>/dev/null
############################


function f_backupeverything {
fonction="f_backupeverything"
f_debug $fonction
j=6 #line where we want to start; leaves space for comments in dat file
for i in `cat $datfile`
do
	f_backupsite $j
	j=$(( j + 1 ))
done
}
function f_backup1site {
fonction="f_backup1site"
f_debug $fonction
echo "Choose which site you want to delete, note it's number, and then press q to quit the list"
sleep 2
less -N $datfile
echo "Please give the site's number:"
read site
f_backup $site
echo "site has been backed up"
}
function f_backupdbftpovh {
fonction="f_backupdbftpovh"
f_debug $fonction
a=`echo $1|cut -f 1 -d";"`
b=`echo $1|cut -f 2 -d";"`
c=`echo $1|cut -f 3 -d";"`
d=`echo $1|cut -f 4 -d";"`
date=`date +%Y%m%d`
#f_ping $b
#if [ "$?" = "1" ]; then
	mkdir -p $backup__dir/ftpovh/$a
	wget -q http://www.$b/$genQL__dir/index.php --http-user=$htaccess__user --http-password=$htaccess__pwd_clr
	echo Download de la db de $a en cours
	lftp -c "open ftp.$b && user $c $d && mirror -x .htpasswd -x www/$genQL__dir/index.php -x www/$genQL__dir/majeur.php /www/$genQL__dir/mysql $backup__dir/ftpovh/$a/" 2>>$pwd_init/log/error.log && echo db rapatriée
############################
# Check if DB backup was done
	checkifdone=`ls $backup__dir/ftpovh/$a/mysql/ | grep "\`date +%Y%m%d\`"|tail -n 1`
	checkifdonesize=`ls -l $backup__dir/ftpovh/$a/mysql/| grep "\`date +%Y%m%d\`"|tail -n 1|cut -f 6 -d" "`
	echo $checkifdone
	if [ `echo $checkifdone|wc -m` -lt "5" ]; then
		echo "ERROR !!! Can't find today's DB backup of $a which is supposed to just have been done !!! " && echo "ERROR !!! Can't find today's DB backup of $a which is supposed to just have been done !!!" >> log/error.ftpovh.log
	else
		echo "$checkifdone has been correctly backed up and is $checkifdonesize in size"
		echo "size is $checkifdonesize on `date +%Y%m%d` at `date +%R`" >> $backup__dir/ftpovh/$a/checkifdone
		checkifdonestate=`cat $backup__dir/ftpovh/$a/checkifdone|grep $checkifdonesize|wc -l`
		let nochangetime=$checkifdonestate/`cat ftpovh.dat|grep $a|cut -f 5 -d";"|sed 's/-/ /'|wc -w`
		if [ "$nochangetime" -gt "1" ]; then
			echo "!!! Warning, DB size of ftpovh $a hasn't changed in $nochangetime days" >> log/warning.ftpovh.log
		fi
	fi
	rm index.php 2>/dev/null
############################
#fi
}
function f_backupdbsme {
fonction="f_backupdbsme"
f_debug $fonction
i=$1
i=`echo $i|cut -f 1 -d";"`
f_ping $sme__domain
if [ "$?" = "1" ]; then
	date=`date +%Y%m%d`
	mkdir -p $backup__dir/sme/$i/files $backup__dir/sme/$i/mysql
	wget -q http://www.$sme__domain/$i/$genQL__dir/index.php --http-user=$htaccess__user --http-password=$htaccess__pwd_clr 2>>$pwd_init/log/error.log
	rm index.php
	echo "Patience, download de la db de "$i" en cours . . ."
	rsync -qaEz -e ssh root@$sme__domain:/$sme__basedir/$i/html/$genQL__dir/mysql/ $backup__dir/sme/$i/mysql/ > /dev/null 2>>$pwd_init/log/error.log && echo "La DB de $i a été downloadé sans erreur"
fi
}
function f_backupdbblueonyx {
fonction="f_backupdbblueonyx"
f_debug $fonction
i=$1
i=`echo $i|cut -f 1 -d";"`
f_ping $i
if [ "$?" = "1" ]; then
	date=`date +%Y%m%d`
	mkdir -p $backup__dir/blueonyx/$i/files $backup__dir/blueonyx/$i/mysql
	wget -q http://$i/$genQL__dir/index.php --http-user=$htaccess__user --http-password=$htaccess__pwd_clr 2>>$pwd_init/log/error.log
	rm index.php
	echo "Patience, download de la db de "$i" en cours . . ."
	rsync -qaEz -e ssh root@$i:/home/sites/$i/web/$genQL__dir/mysql/ $backup__dir/blueonyx/$i/mysql/ > /dev/null 2>>$pwd_init/log/error.log && echo "La DB de $i a été downloadé sans erreur"
fi
}
function f_backup1dbftpovh {
fonction="f_backup1dbftpovh"
f_debug $fonction
cat -n ftpovh.dat|cut -f 1 -d";"
echo " "
echo "Quelle db souhaitez vous backupper ?"
read site
i=`sed -n "$site"p ftpovh.dat`
f_backupdbftpovh $i
}
function f_backup1dbsme {
fonction="f_backup1dbsme"
f_debug $fonction
cat -n sme.dat|cut -f 1 -d";"
echo " "
echo "Quel site souhaitez vous backupper ?"
read site
i=`sed -n "$site"p sme.dat|cut -f 1 -d";"`
f_backupdbsme $i
}
function f_backupdbtoutsme {
fonction="f_backupdbtoutsme"
f_debug $fonction
date=`date +%Y%m%d`
for i in `cat sme.dat`
do
	i=`echo $i|cut -f 1 -d";"`
	f_backupdbsme $i
done
}
function f_backup1dbblueonyx {
fonction="f_backup1dbblueonyx"
f_debug $fonction
cat -n blueonyx.dat|cut -f 1 -d";"
echo " "
echo "Quel site souhaitez vous backupper ?"
read site
i=`sed -n "$site"p blueonyx.dat|cut -f 1 -d";"`
f_backupdbblueonyx $i
}
function f_backupdbtoutblueonyx {
fonction="f_backupdbtoutblueonyx"
f_debug $fonction
date=`date +%Y%m%d`
for i in `cat blueonyx.dat`
do
	i=`echo $i|cut -f 1 -d";"`
	f_backupdbblueonyx $i
done
}
function f_backupdbtoutftpovh {
fonction="f_backupdbtoutftpovh"
f_debug $fonction
for i in `cat ftpovh.dat`
do
f_backupdbftpovh $i
done
}
function f_restore1sme {
fonction="f_restore1sme"
f_debug $fonction
echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
echo "!!!!!!!! FONCTION EXPERIMENTALE, lire le code avant de faire  !!!!!!!!!!!!!"
echo "!!!!!!!! Grosso merdo, on choisit un des backups du site dans !!!!!!!!!!!!!"
echo "!!!!!!!! une liste, le script la décompresse, la remets en    !!!!!!!!!!!!!"
echo "!!!!!!!! place, puis appelle majeur.php pour remettre la db.  !!!!!!!!!!!!!"
echo "!!!!!!!!!!!!!!!!!  Si ca merde, ca nique le site :s  !!!!!!!!!!!!!!!!!!!!!!"
echo "!!!!!!!!    Surtout que le majeur.php il existe pas encore    !!!!!!!!!!!!!"
echo "!!!!!! Pour l'instant, répondez donc non à la question qui suit !!!!!!!!!!!"
echo "!!!  Ne venez pas me dire apres qu'on ne vous a pas prévenu avant   !!!!!!!"
echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
echo " "
cat -n sme.dat|cut -f 1 -d";"
echo " "
f_ping openskill.com
if [ "$?" = "1" ]; then
	echo "Quel site souhaitez vous restaurer?"
	read site
	site=`sed -n "$site"p sme.dat|cut -f 1 -d";"`
	ls -t sme/$site/files/*.tar.gz | sed s:sme/$site/files/:: > templist
	cat -n templist
	echo "Quel backup souhaitez vous restaurer?"
	read bck
	bck=`sed -n "$bck"p templist`
	rm -Rf sme/$site/files/$site/
	echo "Patience, on décompresse :D-"
	tar -xpzf sme/$site/files/$bck 2>>$pwd_init/log/error.log  && echo "archive décompressée"
	db=`ls sme/$site/files/$site/genQL/mysql/|grep .gz |tail -n1`
	gunzip -dc sme/$site/files/$site/genQL/mysql/$db > sme/$site/files/$site/genQL/mysql/notsuperdb.sql 2>>$pwd_init/log/error.log && echo "db décompressée"
	db=`echo $db|sed s:.gz::`
	#chown -R www:\root sme/$site/files/$site/
	echo "Patience, on upload ^^"
	rsync -qaEzc -e ssh sme/$site/files/$site/ root@$sme__domain:/home/e-smith/files/ibays/$site/html/ 2>>$pwd_init/log/error.log && echo "synchronisation effectuée"
	ssh $sme__domain -l root "chown -R www:clients /home/e-smith/files/ibays/$site/html/"
	echo "On réinstaure la base de données"
	wget -q "http://www.$sme__domain/$site/genQL/majeur.php" "--http-user=$htaccess__user" "--http-password=$htaccess__pwd_clr"
	rm templist
	rm majeur.php
	echo "Et voilou, si tout va bien, le site $site a été remis en place comme il était lors du backup de "$db
fi
}
function f_restore1ftpovh {
fonction="f_restore1ftpovh"
f_debug $fonction
echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
echo "!!!!!!!! FONCTION EXPERIMENTALE, lire le code avant de faire  !!!!!!!!!!!!!"
echo "!!!!!!!! Grosso merdo, on choisit un des backups du site dans !!!!!!!!!!!!!"
echo "!!!!!!!! une liste, le script la décompresse, la remets en    !!!!!!!!!!!!!"
echo "!!!!!!!! place, puis appelle majeur.php pour remettre la db.  !!!!!!!!!!!!!"
echo "!!!!!!!!!!!!!!!!!  Si ca merde, ca nique le site :s  !!!!!!!!!!!!!!!!!!!!!!"
echo "!!!!!!!!    Surtout que le majeur.php il existe pas encore    !!!!!!!!!!!!!"
echo "!!!!!! Pour l'instant, répondez donc non à la question qui suit !!!!!!!!!!!"
echo "!!!  Ne venez pas me dire apres qu'on ne vous a pas prévenu avant   !!!!!!!"
echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
cat -n ftpovh.dat|cut -f 1 -d";"
echo " "
echo "Quel site souhaitez vous restaurer ?"
read site
i=`sed -n "$site"p ftpovh.dat`
a=`echo $i|cut -f 1 -d";"`
b=`echo $i|cut -f 2 -d";"`
c=`echo $i|cut -f 3 -d";"`
d=`echo $i|cut -f 4 -d";"`
date=`date +%Y%m%d`
f_ping $b
if [ "$?" = "1" ]; then
	mkdir -p ftpovh/ $a
	wget -q http://www.$b/genQL/index.php --http-user=$htaccess__user --http-password=$htaccess__pwd_clr
	echo Download de la db de $a en cours
	wget -q -m ftp://ftp.$b/www/genQL/mysql/ --ftp-user=$c --ftp-password=$d --directory-prefix=ftpovh/$a/mysql/$a-$date/ 2>>$pwd_init/log/error.log && echo db rapatriée
	mv ftpovh/$a/mysql/$a-$date/ftp.$b/www/genQL/mysql/*$date*.sql.gz ftpovh/$a/mysql/$a-$date/ 2>>$pwd_init/log/error.log
	rm -Rf ftpovh/$a/mysql/$a-$date/ftp.$b
	rm index.php
	echo Download de $a en cours
	wget -q -m ftp://ftp.$b/ --ftp-user=$c --ftp-password=$d --directory-prefix=ftpovh/$a/files/$a-current/ 2>>$pwd_init/log/error.log && echo site rapatrié
	echo Compression de $a en cours
	tar -cpzf ftpovh/ $a /files/ $a - $date .tar.gz ftpovh/ $a /files/ $a -current/ftp. $b  2>>$pwd_init/log/error.log && echo $a backup fait le $date
fi
}
function f_restore1dbftpovh {
fonction="f_restore1dbftpovh"
f_debug $fonction
echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
echo "!!!!!!!! FONCTION EXPERIMENTALE, lire le code avant de faire  !!!!!!!!!!!!!"
echo "!!!!!!!! Grosso merdo, on choisit un des backups du site dans !!!!!!!!!!!!!"
echo "!!!!!!!! une liste, le script la décompresse, la remets en    !!!!!!!!!!!!!"
echo "!!!!!!!! place, puis appelle majeur.php pour remettre la db.  !!!!!!!!!!!!!"
echo "!!!!!!!!!!!!!!!!!  Si ca merde, ca nique le site :s  !!!!!!!!!!!!!!!!!!!!!!"
echo "!!!!!!!!    Surtout que le majeur.php il existe pas encore    !!!!!!!!!!!!!"
echo "!!!!!! Pour l'instant, répondez donc non à la question qui suit !!!!!!!!!!!"
echo "!!!  Ne venez pas me dire apres qu'on ne vous a pas prévenu avant   !!!!!!!"
echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
echo lol
}
function f_restore1dbsme {
fonction="f_restore1dbsme"
f_debug $fonction
echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
echo "!!!!!!!! FONCTION EXPERIMENTALE, lire le code avant de faire  !!!!!!!!!!!!!"
echo "!!!!!!!! Grosso merdo, on choisit un des backups du site dans !!!!!!!!!!!!!"
echo "!!!!!!!! une liste, le script la décompresse, la remets en    !!!!!!!!!!!!!"
echo "!!!!!!!! place, puis appelle majeur.php pour remettre la db.  !!!!!!!!!!!!!"
echo "!!!!!!!!!!!!!!!!!  Si ca merde, ca nique le site :s  !!!!!!!!!!!!!!!!!!!!!!"
echo "!!!!!!!!    Surtout que le majeur.php il existe pas encore    !!!!!!!!!!!!!"
echo "!!!!!! Pour l'instant, répondez donc non à la question qui suit !!!!!!!!!!!"
echo "!!!  Ne venez pas me dire apres qu'on ne vous a pas prévenu avant   !!!!!!!"
echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
echo " "
cat -n sme.dat|cut -f 1 -d";"
echo " "
echo "Quel site souhaitez vous restaurer?"
read site
site=`sed -n "$site"p sme.dat`
ls -t sme/$site/mysql/*.sql.gz | sed s:sme/$site/mysql/:: > templist
cat -n templist
echo "Quelle db souhaitez vous restaurer?"
read bck
bck=`sed -n "$bck"p templist`
echo "Patience, on décompresse :D-"
gzip -dc sme/$site/mysql/$bck > notsuperdb.sql 2>>$pwd_init/log/error.log && echo "db décompressée"
#chown www notsuperdb.sql
echo "Patience, on upload ^^"
rsync -qaEzc -e ssh notsuperdb.sql root@$sme__domain:/home/e-smith/files/ibays/$site/html/genQL/mysql/ 2>>$pwd_init/log/error.log && echo "db uploadée"
ssh $sme__domain -l root "chown -R www:clients /home/e-smith/files/ibays/$site/html/"
echo "On réinstaure la base de données"
wget -q "http://www.$sme__domain/$site/genQL/majeur.php" "--http-user=$htaccess__user" "--http-password=$htaccess__pwd_clr"
rm templist majeur.php notsuperdb.sql
echo "Et voilou, si tout va bien, la db du site $site a été remise en place comme elle était lors du backup de "$bck
}
function f_ping {
fonction="f_ping"
f_debug $fonction
if [ "$pingtest" = "1" ]; then
	if ping -c 1 -w 1 -q $1 </dev/null &>/dev/null; then
		echo "$1 Answers to pings: GOOD."
		return 1
	else 
		date=`date +%Y%m%d`
		echo "$1 doesn't answer to ping on $date !!! " >> $pwd_init/log/error.log
		return 2
	fi
else
	echo "ping test disabled."
	return 0
fi
}
function f_nope {
fonction="f_nope"
f_debug $fonction
#Spéciale dédicace aux gens qui ne lisent pas les menus :p

echo " ___________________________________________________________________"
echo "| Erreur DTC:                                                       |"
echo "| same player shoot again, vous n'avez pas du faire le bon choix!!! |"
echo " -------------------------------------------------------------------"
echo "        \   ^__^"
echo "         \  (oo)\_______"
echo "            (__)\       *\/\ "
echo "                ||----w | "
echo "                ||     || "
echo "/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/"
}
function f_rapport {
fonction="f_rapport"
f_debug $fonction
du -h --max-depth=1 ftpovh sme
}
function f_cleansme {
fonction="f_cleansme"
f_debug $fonction
i=$1
i=`cat sme.dat|grep $i`
coef=`echo $i|cut -f 5 -d";"`
let trans=`echo $i|cut -f 3 -d";"|sed 's/-/ /'|wc -w`*`echo $i|cut -f 4 -d";"|sed 's/-/ /'|wc -w`
let coeftot=$coef*$trans
i=`echo $i|cut -f 1 -d";"`
echo "clean des backup de $i"
ls $backup__dir/sme/$i/files|grep tar.gz|grep -v Jan|grep -v Feb|grep -v Mar|grep -v Apr|grep -v May|grep -v Jun|grep -v Jul|grep -v Aug|grep -v Sep|grep -v Oct|grep -v Nov|grep -v Dec>tempclear
let limit=$nb__site*$coeftot
echo "$i a droit à $limit backups de sites"
n=`cat tempclear|wc -l`
echo "$i a $n backups de sites"
n=$(( n - $limit ))
[[ $n < 0 ]] && n=0
for j in `head -n $n tempclear`
do
	rm $backup__dir/sme/$i/files/$j && echo "$backup__dir/sme/$i/files/$j à été effacé"
done
rm tempclear
}
function f_cleanftpovh {
fonction="f_cleanftpovh"
f_debug $fonction
i=$1
i=`cat ftpovh.dat|grep $i`
coef=`echo $i|cut -f 8 -d";"`
let trans=`echo $i|cut -f 6 -d";"|sed 's/-/ /'|wc -w`*`echo $i|cut -f 7 -d";"|sed 's/-/ /'|wc -w`
let coeftot=$coef*$trans
i=`echo $i|cut -f 1 -d";"`
echo "clean des backup de $i"
ls $backup__dir/ftpovh/$i/files|grep tar.gz|grep -v Jan|grep -v Feb|grep -v Mar|grep -v Apr|grep -v May|grep -v Jun|grep -v Jul|grep -v Aug|grep -v Sep|grep -v Oct|grep -v Nov|grep -v Dec>tempclear
let limit=$nb__site*$coeftot
echo "$i a droit à $limit backups de sites"
n=`cat tempclear|wc -l`
echo "$i a $n backups de sites"
n=$(( n - $limit ))
[[ $n < 0 ]] && n=0
head -n $n tempclear
for j in `head -n $n tempclear`
do
	rm $backup__dir/ftpovh/$i/files/$j && echo "$backup__dir/ftpovh/$i/files/$j à été effacé"
done
rm tempclear
}
function f_cleandbsme {
fonction="f_cleandbsme"
f_debug $fonction
i=$1
i=`cat sme.dat|grep $i`
coef=`echo $i|cut -f 5 -d";"`
trans=`echo $i|cut -f 2 -d";"|sed 's/-/ /'|wc -w`
let coeftot=$coef*$trans
i=`echo $i|cut -f 1 -d";"`
echo "clean des backup de $i"
ls $backup__dir/sme/$i/mysql/|grep sql.gz|grep -v ZFIX >tempclear
let limit=$nb__db*$coeftot
echo "$i a droit à $limit backups de db"
n=`cat tempclear|wc -l`
echo "$i a $n backups de db"
n=$(( n - $limit ))
if [ $n -lt 0 ]; then
	n=0
fi
for j in `head -n $n tempclear`
do
	rm $backup__dir/sme/$i/mysql/$j && echo "$backup__dir/sme/$i/mysql/$j à été effacé"
done
rm tempclear
}
function f_cleandbftpovh {
fonction="f_cleandbftpovh"
f_debug $fonction
i=$1
i=`cat ftpovh.dat|grep $i`
coef=`echo $i|cut -f 8 -d";"`
trans=`echo $i|cut -f 5 -d";"|sed 's/-/ /'|wc -w`
let coeftot=$coef*$trans
i=`echo $i|cut -f 1 -d";"`
echo "clean des backup de $i"
ls $backup__dir/ftpovh/$i/files|grep tar.gz|grep -v Jan|grep -v Feb|grep -v Mar|grep -v Apr|grep -v May|grep -v Jun|grep -v Jul|grep -v Aug|grep -v Sep|grep -v Oct|grep -v Nov|grep -v Dec>tempclear
let limit=$nb__db*$coeftot
echo "$i a droit à $limit backups de db"
n=`cat tempclear|wc -l`
echo "$i a $n backups de db"
n=$(( n - $limit ))
if [ $n -lt 0 ]; then
	n=0
fi
head -n $n tempclear
for j in `head -n $n tempclear`
do
	rm $backup__dir/ftpovh/$i/mysql/$j && echo "$backup__dir/ftpovh/$i/mysql/$j à été effacé"
done
rm tempclear
}
#######################################################################################################################################
function f_backupexception {
fonction="f_backupexception"
f_debug $fonction
date=`date +%Y%m%d`
mkdir -p $backup__dir/exception/$exception/ATG-current/
wget -q http://www.$exception.biz/$genQL__dir/index.php --http-user=$htaccess__user --http-password=$htaccess__pwd_clr 2>>$pwd_init/log/error.log
echo "Patience, ca download . . ."
rsync -qaEz -e ssh login@$exception.biz:$except_path $backup__dir/exception/$exception/ATG-current/
echo "Patience, ca compresse . . ."
tar -cpzf $backup__dir/exception/$exception/ATG-$date.tar.gz $backup__dir/exception/$exception/ATG-current/
}
function f_backupdbexception {
fonction="f_backupdbexception"
f_debug $fonction
date=`date +%Y%m%d`
mkdir -p exception/$exception/db/
wget -q http://www.$exception.biz/$genQL__dir/index.php --http-user=$htaccess__user --http-password=$htaccess__pwd_clr 2>>$pwd_init/log/error.log && echo db générée.
echo "Patience, ca download . . ."
rsync -qaEz -e ssh login@$exception.biz:$except_path/www/genQL/mysql/ exception/$exception/db/ 2>>$pwd_init/log/error.log && echo "Patience, ca compresse . . ."
}
function f_restoreexception {
fonction="f_restoreexception"
f_debug $fonction
}
function f_restoredbexception {
fonction="f_restoredbexception"
f_debug $fonction
}
#Fonctions de backup cron, ces fonctions n'appellent les sites qui ne nécessitent pas l'entrée d'un mot de passe
function c_quot {
fonction="c_quot"
f_debug $fonction
date=`date +%Y%m%d`
f_backupdbtoutsme
f_backupdbtoutftpovh
cat $pwd_init/log/error.log >> log/cronj-$date.log
du -h --max-depth=1 ftpovh sme exception >> log/cronj-$date.log
}
function c_hebd {
fonction="c_hebd"
f_debug $fonction
date=`date +%Y%m%d`
f_backuptoutsme
f_backuptoutftpovh
cat $pwd_init/log/error.log >> log/crons-$date.txt
du -h --max-depth=1 ftpovh sme exception >> log/crons-$date.txt
}
function c_hourly {
fonction="c_hourly"
f_debug $fonction
priority=0
while [ $priority -lt "11" ]
do
echo "Priority = $priority "
	for i in `cat sme.dat`
	do
		prioritX=`echo "$i"|cut -f 7 -d";"`
		if [ "$prioritX" = "$priority" ]; then
			echo gagné pour $i
			hour_db=`echo "$i"|cut -f 2 -d";"|grep \`date +%H\``
			day_site=`echo "$i"|cut -f 3 -d";"|grep \`date +%a\``
			hour_site=`echo "$i"|cut -f 4 -d";"|grep \`date +%H\``
			date=`date +%Y%m%d`
			i=`echo $i|cut -f 1 -d";"`
			if [ "$hour_db" != "" ]; then
				f_backupdbsme $i
			fi
			if [ "`date +%d`" = "01" ]; then
				f_backupsme $i
			elif [ "`date +%d`" != "01" ]; then
				if [ "$day_site" != "" ]; then
					if [ "$hour_site" != "" ]; then
						f_backupsme $i
					fi
				fi
			fi
		fi
	done
	for i in `cat blueonyx.dat`
	do
		prioritX=`echo "$i"|cut -f 7 -d";"`
		if [ "$prioritX" = "$priority" ]; then
			echo gagné pour $i
			hour_db=`echo "$i"|cut -f 2 -d";"|grep \`date +%H\``
			day_site=`echo "$i"|cut -f 3 -d";"|grep \`date +%a\``
			hour_site=`echo "$i"|cut -f 4 -d";"|grep \`date +%H\``
			date=`date +%Y%m%d`
			i=`echo $i|cut -f 1 -d";"`
			if [ "$hour_db" != "" ]; then
				f_backupdbblueonyx $i
			fi
			if [ "`date +%d`" = "01" ]; then
				f_backupblueonyx $i
			elif [ "`date +%d`" != "01" ]; then
				if [ "$day_site" != "" ]; then
					if [ "$hour_site" != "" ]; then
						f_backupblueonyx $i
					fi
				fi
			fi
		fi
	done
	for i in `cat ftpovh.dat`
	do
		prioritX=`echo "$i"|cut -f 10 -d";"`
		if [ "$prioritX" = "$priority" ]; then
			hour_db=`echo "$i"|cut -f 5 -d";"|grep \`date +%H\``
			day_site=`echo "$i"|cut -f 6 -d";"|grep \`date +%a\``
			hour_site=`echo "$i"|cut -f 7 -d";"|grep \`date +%H\``
			date=`date +%Y%m%d`
			if [ "$hour_db" != "" ]; then
				f_backupdbftpovh $i
			fi
			if [ "`date +%d`" = "01" ]; then
				f_backupftpovh $i
			elif [ "`date +%d`" != "01" ]; then
				if [ "$day_site" != "" ]; then
					if [ "$hour_site" != "" ]; then
						f_backupftpovh $i
					fi
				fi
			fi
		fi
	done
let priority=$priority+1
done
if [ "date +%H" = "1" ]; then
	f_maillog
fi
f_exit
}
function f_randomhour {
fonction="f_randomhour"
f_debug $fonction
let R=$RANDOM%24+100 &&R=`echo $R|cut -c 2-3`
}
function f_randomday {
fonction="f_randomday"
f_debug $fonction
let d=$RANDOM%700/100+1 && if [ $d -eq 1 ]; then d="Mon"
elif [ $d -eq 2 ]; then d="Tue"
elif [ $d -eq 3 ]; then d="Wed"
elif [ $d -eq 4 ]; then d="Thu"
elif [ $d -eq 5 ]; then d="Fri"
elif [ $d -eq 6 ]; then d="Sat"
elif [ $d -eq 7 ]; then d="Sun"
fi
}
################################
# Fin gestion des FONCTIONS
################################################################################################
################################################################################################
# Début Programme principal ^^
# Si le programme est lancé avec un parametre, il va 
# faire un backup de tous ces serveurs puis exit 0, sinon, 
# lancer le menu "contextuel".  
# Ce code est en FIN de fichier, c'est à dire APRES toutes les
# déclarations de fonctions, sinon ca tourne pas.
if [ "$1" = "" ]; then
m_main
elif [ $1 = "ftpovh" ]; then
	echo "le backup de tout ftpovh commence dans 3 secondes.";sleep 3
	f_backuptoutftpovh
	f_exit
elif [ $1 = "quot" ]; then
	echo "le backup de toutes les db commence dans 3 secondes.";sleep 3
	f_quot
	f_exit
elif [ $1 = "hebd" ]; then
	echo "le backup de tous les sites commence dans 3 secondes";sleep 3
	f_hebd
	f_exit
elif [ $1 = "sme" ]; then
	echo "le backup de tout sme commence dans 3 secondes.";sleep 3
	f_backuptoutsme
	f_exit
elif [ $1 = "hourly" ]; then
	c_hourly
	f_exit
fi


#####################################################
#TODOLIST
function f_checkbackup {
#si heure=23; check récursivement dans tous les dossiers sql pour voir si un backup db a été effectué!)
echo lol
}

function f_countbackup {
#a placer dans exi
#if heure=23
#compter le nombre de db/sites a backupper selon les fichiers dat
#faire une var qui fait +1 chaque fois que un site/db est backuppé
#en fin de journée les chiffres doivent correspondre.
echo lol
}